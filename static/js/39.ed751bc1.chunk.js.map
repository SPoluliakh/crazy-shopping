{"version":3,"file":"static/js/39.ed751bc1.chunk.js","mappings":"qOAEaA,EAAOC,EAAAA,GAAAA,GAAH,qRAYJC,EAAOD,EAAAA,GAAAA,IAAH,wIAQJE,EAASF,EAAAA,GAAAA,OAAH,6P,SCNNG,EAAc,SAAC,GAQb,IAPbC,EAOY,EAPZA,MACAC,EAMY,EANZA,MACAC,EAKY,EALZA,GACAC,EAIY,EAJZA,YACAC,EAGY,EAHZA,MACAC,EAEY,EAFZA,KACAC,EACY,EADZA,MAEA,GAAsCC,EAAAA,EAAAA,WAAkB,GAAxD,eAAOC,EAAP,KAAoBC,EAApB,KACQC,GAAMC,EAAAA,EAAAA,MAAND,EAMR,OACE,UAAC,EAAD,YACE,wBAAKA,EAAE,cAAD,OAAeV,OACrB,UAAC,EAAD,YACE,gBAAKY,IAAKX,EAAOY,IAAKb,EAAOc,MAAO,CAAEC,MAAO,YAC7C,4BACE,yBACGL,EAAE,kBADL,KAC0BJ,EAD1B,SAGA,yBACGI,EAAE,kBADL,KAC0BN,MAE1B,yBACGM,EAAE,mBADL,KAC2BL,MAE3B,SAAC,EAAD,CAAWW,KAAK,SAAhB,UACE,SAAC,MAAD,CAAQC,KAAM,cAIpB,2BACGT,IAAe,6BAAKE,EAAE,oBAAD,OAAqBP,QAC3C,mBAAQa,KAAK,SAASE,QA1BP,WACnBT,GAAe,SAAAU,GAAS,OAAKA,CAAL,GACzB,EAwBK,SACyCT,EAArCF,EAAuC,eAAvB,0BAtBVN,EA2BjB,C,kIC1DYkB,EAAsB,CACjC,CAAEC,KAAK,iBAAmBC,KAAM,MAAOpB,GAAI,GAC3C,CAAEmB,KAAK,mBAAqBC,KAAM,QAASpB,GAAI,GAC/C,CAAEmB,KAAM,cAAeC,KAAM,cAAepB,GAAI,GAChD,CAAEmB,KAAM,WAAYC,KAAM,WAAYpB,GAAI,I,SCF/BqB,EAAe,WAC1B,IAAQb,GAAMC,EAAAA,EAAAA,MAAND,EAER,OACE,+BACE,0BACE,wBACGU,EAAaI,KAAI,gBAAGF,EAAH,EAAGA,KAAMD,EAAT,EAASA,KAAMnB,EAAf,EAAeA,GAAf,OAChB,yBACE,SAACuB,EAAA,EAAD,CAAYC,GAAIJ,EAAhB,SACGZ,EAAE,gBAAD,OAAiBW,EAAKM,mBAFnBzB,EADO,SAW3B,E,mBCpBY0B,E,QAAOhC,GAAAA,GAAH,oICKJiC,EAAgB,WAC3B,IAAQC,GAASC,EAAAA,EAAAA,GAAsB,GAAI,CACzCC,2BAA2B,IADrBF,KAGAG,GAAaC,EAAAA,EAAAA,MAAbD,SAER,OACE,iCACE,SAACV,EAAD,IACc,eAAbU,IACC,SAAC,EAAD,iBACGH,QADH,IACGA,OADH,EACGA,EAAMN,KACL,gBACExB,EADF,EACEA,MACAC,EAFF,EAEEA,MACAC,EAHF,EAGEA,GACAC,EAJF,EAIEA,YACAG,EALF,EAKEA,MALF,IAME6B,OAAU/B,EANZ,EAMYA,MAAOC,EANnB,EAMmBA,KANnB,OAQE,SAACN,EAAA,EAAD,CAEEC,MAAOA,EACPC,MAAOA,EACPC,GAAIA,EACJC,YAAaA,EACbC,MAAOA,EACPC,KAAMA,EACNC,MAAOA,GAPFJ,EATT,OAsBN,SAAC,EAAAkC,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C","sources":["Components/ProductCard/ProductCard.styled.ts","Components/ProductCard/ProductCard.tsx","Helpers/catalogueNav.ts","Pages/Catalogue/CatalogueNav/CatalogueNav.tsx","Pages/Catalogue/Catalogue.styled.ts","Pages/Catalogue/Catalogue.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 3 - 30px);\n  margin-bottom: 30px;\n  margin-right: 30px;\n  padding: 10px;\n  box-shadow: 2px 9px 5px -1px rgba(0, 0, 0, 0.66);\n  border-radius: 10px;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Wrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  flex-grow: 1;\n`;\n\nexport const AddBtn = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border: transparent;\n  margin-top: 20px;\n  transition: transform 250ms linear;\n\n  :hover {\n    transform: rotateZ(360deg) scale(1.5);\n    transform-origin: 50%;\n  }\n`;\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FcPlus } from 'react-icons/fc';\nimport * as SC from './ProductCard.styled';\n\ninterface IProps {\n  title: string;\n  image: string;\n  id: number;\n  description: string;\n  count: number;\n  rate: number;\n  price: number;\n  key: number;\n}\n\nexport const ProductCard = ({\n  title,\n  image,\n  id,\n  description,\n  count,\n  rate,\n  price,\n}: IProps) => {\n  const [showDetails, setShowDetails] = useState<boolean>(false);\n  const { t } = useTranslation();\n\n  const onDetailsBtn = (): void => {\n    setShowDetails(prevState => !prevState);\n  };\n\n  return (\n    <SC.Item key={id}>\n      <h2>{t(`curd.title.${title}`)}</h2>\n      <SC.Wrap>\n        <img src={image} alt={title} style={{ width: '150px' }} />\n        <div>\n          <p>\n            {t('curdinfo.Price')}: {price} $\n          </p>\n          <p>\n            {t('curdinfo.Stock')}: {count}\n          </p>\n          <p>\n            {t('curdinfo.Rating')}: {rate}\n          </p>\n          <SC.AddBtn type=\"button\">\n            <FcPlus size={24} />\n          </SC.AddBtn>\n        </div>\n      </SC.Wrap>\n      <div>\n        {showDetails && <p> {t(`curd.description.${description}`)}</p>}\n        <button type=\"button\" onClick={onDetailsBtn}>\n          {!showDetails ? t(`curdbtn.Details`) : t(`curdbtn.Hide`)}\n        </button>\n      </div>\n    </SC.Item>\n  );\n};\n","import { nav } from './intarfaces/navigation/navigation';\n\nexport const catalogueNav: nav[] = [\n  { name: `men's clothing`, href: 'men', id: 1 },\n  { name: `women's clothing`, href: 'women', id: 2 },\n  { name: 'electronics', href: 'electronics', id: 3 },\n  { name: 'jewelery', href: 'jewelery', id: 4 },\n];\n","import { useTranslation } from 'react-i18next';\nimport { CustomLink } from '../../../Components/CustomLink/CustomLink';\nimport { catalogueNav } from '../../../Helpers/catalogueNav';\n\nexport const CatalogueNav = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <nav>\n        <ul>\n          {catalogueNav.map(({ href, name, id }) => (\n            <li key={id}>\n              <CustomLink to={href}>\n                {t(`catalogueNav.${name.toLowerCase()}`)}\n              </CustomLink>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: -30px;\n  margin-right: -30px;\n`;\n","import { Suspense } from 'react';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { useFetchProductsQuery } from '../../Redux/catalogueOperations/catalogueOperations';\nimport { CatalogueNav } from './CatalogueNav/CatalogueNav';\nimport { ProductCard } from '../../Components/ProductCard/ProductCard';\nimport * as SC from './Catalogue.styled';\n\nexport const CataloguePage = () => {\n  const { data } = useFetchProductsQuery('', {\n    refetchOnMountOrArgChange: true,\n  });\n  const { pathname } = useLocation();\n\n  return (\n    <>\n      <CatalogueNav />\n      {pathname === '/catalogue' && (\n        <SC.List>\n          {data?.map(\n            ({\n              title,\n              image,\n              id,\n              description,\n              price,\n              rating: { count, rate },\n            }) => (\n              <ProductCard\n                key={id}\n                title={title}\n                image={image}\n                id={id}\n                description={description}\n                count={count}\n                rate={rate}\n                price={price}\n              />\n            )\n          )}\n        </SC.List>\n      )}\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n"],"names":["Item","styled","Wrap","AddBtn","ProductCard","title","image","id","description","count","rate","price","useState","showDetails","setShowDetails","t","useTranslation","src","alt","style","width","type","size","onClick","prevState","catalogueNav","name","href","CatalogueNav","map","CustomLink","to","toLowerCase","List","CataloguePage","data","useFetchProductsQuery","refetchOnMountOrArgChange","pathname","useLocation","rating","Suspense","fallback"],"sourceRoot":""}